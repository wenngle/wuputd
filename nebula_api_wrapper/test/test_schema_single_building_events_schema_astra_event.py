# coding: utf-8

"""
    nebula-api

    The public Nebula Labs API for access to pertinent UT Dallas data

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.schema_single_building_events_schema_astra_event import SchemaSingleBuildingEventsSchemaAstraEvent

class TestSchemaSingleBuildingEventsSchemaAstraEvent(unittest.TestCase):
    """SchemaSingleBuildingEventsSchemaAstraEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SchemaSingleBuildingEventsSchemaAstraEvent:
        """Test SchemaSingleBuildingEventsSchemaAstraEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SchemaSingleBuildingEventsSchemaAstraEvent`
        """
        model = SchemaSingleBuildingEventsSchemaAstraEvent()
        if include_optional:
            return SchemaSingleBuildingEventsSchemaAstraEvent(
                building = '',
                rooms = [
                    openapi_client.models.schema/room_events_schema_astra_event.schema.RoomEvents-schema_AstraEvent(
                        events = [
                            openapi_client.models.schema/astra_event.schema.AstraEvent(
                                activity_name = '', 
                                capacity = 1.337, 
                                current_state = '', 
                                end_date = '', 
                                meeting_type = '', 
                                not_allowed_usage_mask = 1.337, 
                                start_date = '', 
                                usage_color = '', )
                            ], 
                        room = '', )
                    ]
            )
        else:
            return SchemaSingleBuildingEventsSchemaAstraEvent(
        )
        """

    def testSchemaSingleBuildingEventsSchemaAstraEvent(self):
        """Test SchemaSingleBuildingEventsSchemaAstraEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
