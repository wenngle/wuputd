# coding: utf-8

"""
    nebula-api

    The public Nebula Labs API for access to pertinent UT Dallas data

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.schema_section import SchemaSection

class TestSchemaSection(unittest.TestCase):
    """SchemaSection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SchemaSection:
        """Test SchemaSection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SchemaSection`
        """
        model = SchemaSection()
        if include_optional:
            return SchemaSection(
                id = '',
                academic_session = openapi_client.models.schema/academic_session.schema.AcademicSession(
                    end_date = '', 
                    name = '', 
                    start_date = '', ),
                attributes = openapi_client.models.attributes.attributes(),
                core_flags = [
                    ''
                    ],
                course_reference = '',
                grade_distribution = [
                    56
                    ],
                instruction_mode = '',
                internal_class_number = '',
                meetings = [
                    openapi_client.models.schema/meeting.schema.Meeting(
                        end_date = '', 
                        end_time = '', 
                        location = openapi_client.models.schema/location.schema.Location(
                            building = '', 
                            map_uri = '', 
                            room = '', ), 
                        meeting_days = [
                            ''
                            ], 
                        modality = '', 
                        start_date = '', 
                        start_time = '', )
                    ],
                professors = [
                    ''
                    ],
                section_corequisites = openapi_client.models.schema/collection_requirement.schema.CollectionRequirement(
                    name = '', 
                    options = [
                        None
                        ], 
                    required = 56, 
                    type = '', ),
                section_number = '',
                syllabus_uri = '',
                teaching_assistants = [
                    openapi_client.models.schema/assistant.schema.Assistant(
                        email = '', 
                        first_name = '', 
                        last_name = '', 
                        role = '', )
                    ]
            )
        else:
            return SchemaSection(
        )
        """

    def testSchemaSection(self):
        """Test SchemaSection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
