# coding: utf-8

"""
    nebula-api

    The public Nebula Labs API for access to pertinent UT Dallas data

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schema_academic_session import SchemaAcademicSession
from openapi_client.models.schema_assistant import SchemaAssistant
from openapi_client.models.schema_collection_requirement import SchemaCollectionRequirement
from openapi_client.models.schema_meeting import SchemaMeeting
from typing import Optional, Set
from typing_extensions import Self

class SchemaSection(BaseModel):
    """
    SchemaSection
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    academic_session: Optional[SchemaAcademicSession] = None
    attributes: Optional[Dict[str, Any]] = None
    core_flags: Optional[List[StrictStr]] = None
    course_reference: Optional[StrictStr] = None
    grade_distribution: Optional[List[StrictInt]] = None
    instruction_mode: Optional[StrictStr] = None
    internal_class_number: Optional[StrictStr] = None
    meetings: Optional[List[SchemaMeeting]] = None
    professors: Optional[List[StrictStr]] = None
    section_corequisites: Optional[SchemaCollectionRequirement] = None
    section_number: Optional[StrictStr] = None
    syllabus_uri: Optional[StrictStr] = None
    teaching_assistants: Optional[List[SchemaAssistant]] = None
    __properties: ClassVar[List[str]] = ["_id", "academic_session", "attributes", "core_flags", "course_reference", "grade_distribution", "instruction_mode", "internal_class_number", "meetings", "professors", "section_corequisites", "section_number", "syllabus_uri", "teaching_assistants"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of academic_session
        if self.academic_session:
            _dict['academic_session'] = self.academic_session.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in meetings (list)
        _items = []
        if self.meetings:
            for _item_meetings in self.meetings:
                if _item_meetings:
                    _items.append(_item_meetings.to_dict())
            _dict['meetings'] = _items
        # override the default output from pydantic by calling `to_dict()` of section_corequisites
        if self.section_corequisites:
            _dict['section_corequisites'] = self.section_corequisites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teaching_assistants (list)
        _items = []
        if self.teaching_assistants:
            for _item_teaching_assistants in self.teaching_assistants:
                if _item_teaching_assistants:
                    _items.append(_item_teaching_assistants.to_dict())
            _dict['teaching_assistants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "academic_session": SchemaAcademicSession.from_dict(obj["academic_session"]) if obj.get("academic_session") is not None else None,
            "attributes": obj.get("attributes"),
            "core_flags": obj.get("core_flags"),
            "course_reference": obj.get("course_reference"),
            "grade_distribution": obj.get("grade_distribution"),
            "instruction_mode": obj.get("instruction_mode"),
            "internal_class_number": obj.get("internal_class_number"),
            "meetings": [SchemaMeeting.from_dict(_item) for _item in obj["meetings"]] if obj.get("meetings") is not None else None,
            "professors": obj.get("professors"),
            "section_corequisites": SchemaCollectionRequirement.from_dict(obj["section_corequisites"]) if obj.get("section_corequisites") is not None else None,
            "section_number": obj.get("section_number"),
            "syllabus_uri": obj.get("syllabus_uri"),
            "teaching_assistants": [SchemaAssistant.from_dict(_item) for _item in obj["teaching_assistants"]] if obj.get("teaching_assistants") is not None else None
        })
        return _obj


