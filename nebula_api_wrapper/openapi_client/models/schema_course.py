# coding: utf-8

"""
    nebula-api

    The public Nebula Labs API for access to pertinent UT Dallas data

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schema_collection_requirement import SchemaCollectionRequirement
from typing import Optional, Set
from typing_extensions import Self

class SchemaCourse(BaseModel):
    """
    SchemaCourse
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    activity_type: Optional[StrictStr] = None
    attributes: Optional[Dict[str, Any]] = None
    catalog_year: Optional[StrictStr] = None
    class_level: Optional[StrictStr] = None
    co_or_pre_requisites: Optional[SchemaCollectionRequirement] = None
    corequisites: Optional[SchemaCollectionRequirement] = None
    course_number: Optional[StrictStr] = None
    credit_hours: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    enrollment_reqs: Optional[StrictStr] = None
    grading: Optional[StrictStr] = None
    internal_course_number: Optional[StrictStr] = None
    laboratory_contact_hours: Optional[StrictStr] = None
    lecture_contact_hours: Optional[StrictStr] = None
    offering_frequency: Optional[StrictStr] = None
    prerequisites: Optional[SchemaCollectionRequirement] = None
    school: Optional[StrictStr] = None
    sections: Optional[List[StrictStr]] = None
    subject_prefix: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["_id", "activity_type", "attributes", "catalog_year", "class_level", "co_or_pre_requisites", "corequisites", "course_number", "credit_hours", "description", "enrollment_reqs", "grading", "internal_course_number", "laboratory_contact_hours", "lecture_contact_hours", "offering_frequency", "prerequisites", "school", "sections", "subject_prefix", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaCourse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of co_or_pre_requisites
        if self.co_or_pre_requisites:
            _dict['co_or_pre_requisites'] = self.co_or_pre_requisites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of corequisites
        if self.corequisites:
            _dict['corequisites'] = self.corequisites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prerequisites
        if self.prerequisites:
            _dict['prerequisites'] = self.prerequisites.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaCourse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "activity_type": obj.get("activity_type"),
            "attributes": obj.get("attributes"),
            "catalog_year": obj.get("catalog_year"),
            "class_level": obj.get("class_level"),
            "co_or_pre_requisites": SchemaCollectionRequirement.from_dict(obj["co_or_pre_requisites"]) if obj.get("co_or_pre_requisites") is not None else None,
            "corequisites": SchemaCollectionRequirement.from_dict(obj["corequisites"]) if obj.get("corequisites") is not None else None,
            "course_number": obj.get("course_number"),
            "credit_hours": obj.get("credit_hours"),
            "description": obj.get("description"),
            "enrollment_reqs": obj.get("enrollment_reqs"),
            "grading": obj.get("grading"),
            "internal_course_number": obj.get("internal_course_number"),
            "laboratory_contact_hours": obj.get("laboratory_contact_hours"),
            "lecture_contact_hours": obj.get("lecture_contact_hours"),
            "offering_frequency": obj.get("offering_frequency"),
            "prerequisites": SchemaCollectionRequirement.from_dict(obj["prerequisites"]) if obj.get("prerequisites") is not None else None,
            "school": obj.get("school"),
            "sections": obj.get("sections"),
            "subject_prefix": obj.get("subject_prefix"),
            "title": obj.get("title")
        })
        return _obj


